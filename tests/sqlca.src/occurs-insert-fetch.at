AT_SETUP([occurs-insert-fetch])

AT_DATA([prog.cbl], [
       IDENTIFICATION              DIVISION.
      ******************************************************************
       PROGRAM-ID.                 prog.
      ******************************************************************
       DATA                        DIVISION.
      ******************************************************************
       WORKING-STORAGE             SECTION.
       01 TEST-DATA.
         03 FILLER PIC X(9) VALUE "0001AAAAA".
         03 FILLER PIC X(9) VALUE "0002BBBBB".
         03 FILLER PIC X(9) VALUE "0003CCCCC".
         03 FILLER PIC X(9) VALUE "0004DDDDD".
         03 FILLER PIC X(9) VALUE "0005EEEEE".
      
       01 TEST-DATA-R REDEFINES TEST-DATA.
        03 TEST-TBL  OCCURS 5.
          05 TEST-ID PIC 9(4).
          05 TEST-V  PIC X(5). 

       01 IDX        PIC 9.

       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01 DBNAME          PIC X(30) VALUE SPACE.
       01 USERNAME        PIC X(30) VALUE SPACE.
       01 PASSWD          PIC X(10) VALUE SPACE.
       01 DATA-INSERT.
        05 DATA-INSERT-ID PIC 9(4)  OCCURS 5.
        05 DATA-INSERT-V  PIC X(5)  OCCURS 5.
       01 DATA-FETCH.
        05 DATA-FETCH-ID  PIC 9(4)  OCCURS 5.
        05 DATA-FETCH-V   PIC X(5)  OCCURS 5.
       EXEC SQL END DECLARE SECTION END-EXEC.

       EXEC SQL INCLUDE SQLCA END-EXEC.

      ******************************************************************
       PROCEDURE                   DIVISION.
      ******************************************************************
       MAIN-RTN.
           
           PERFORM SETUP-DB.

           EXEC SQL
               DECLARE C1 CURSOR FOR
               SELECT ID, V FROM TESTTABLE
           END-EXEC.

           EXEC SQL
               OPEN C1
           END-EXEC.

           EXEC SQL
               FETCH C1 INTO :DATA-FETCH-ID, :DATA-FETCH-V
           END-EXEC.
           
           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > 5
               IF SQLCODE = 0
                   DISPLAY DATA-FETCH-ID(IDX) "," DATA-FETCH-V(IDX)
               END-IF
           END-PERFORM.

           EXEC SQL
               CLOSE C1
           END-EXEC.

       PERFORM CLEANUP-DB.

       STOP RUN.

      ******************************************************************
       SETUP-DB.
      ******************************************************************

           MOVE  "<|DB_NAME|>@<|DB_HOST|>:<|DB_PORT|>"
             TO DBNAME.
           MOVE  "<|DB_USER|>"
             TO USERNAME.
           MOVE  "<|DB_PASSWORD|>"
             TO PASSWD.

           EXEC SQL
               CONNECT :USERNAME IDENTIFIED BY :PASSWD USING :DBNAME 
           END-EXEC.

           EXEC SQL
               DROP TABLE IF EXISTS TESTTABLE
           END-EXEC.

           EXEC SQL
               CREATE TABLE TESTTABLE
               (
                 ID integer,
                 V  char(5)
               )
           END-EXEC.
     
            PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > 5
              MOVE TEST-ID(IDX) TO DATA-INSERT-ID(IDX)
              MOVE TEST-V(IDX) TO DATA-INSERT-V(IDX)
            END-PERFORM.

           EXEC SQL
               INSERT INTO TESTTABLE VALUES
                 (:DATA-INSERT-ID, :DATA-INSERT-V)
           END-EXEC.

      ******************************************************************
       CLEANUP-DB.
      ******************************************************************

           EXEC SQL
               DISCONNECT ALL
           END-EXEC.
])

AT_CHECK([ocesql prog.cbl prog.cob], [0], 
[precompile start: prog.cbl
=======================================================
              LIST OF CALLED DB Library API            @&t@
=======================================================
Generate:OCESQLCursorDeclare
Generate:OCESQLCursorOpen
Generate:OCESQLCursorFetchOccurs
Generate:OCESQLCursorClose
Generate:OCESQLConnect
Generate:OCESQLExec
Generate:OCESQLExec
Generate:OCESQLExecParamsOccurs
Generate:OCESQLDisconnect
=======================================================
])
AT_CHECK([${EMBED_DB_INFO} prog.cob])
AT_CHECK([${COMPILE_MODULE} prog.cob])
AT_CHECK([${RUN_MODULE} prog], [0], 
[0001,AAAAA
0002,BBBBB
0003,CCCCC
0004,DDDDD
0005,EEEEE
])

AT_CLEANUP